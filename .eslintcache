[{"/Users/ralphmaamari/WebstormProjects/settings-render/src/index.tsx":"1","/Users/ralphmaamari/WebstormProjects/settings-render/src/reportWebVitals.ts":"2","/Users/ralphmaamari/WebstormProjects/settings-render/src/App.tsx":"3","/Users/ralphmaamari/WebstormProjects/settings-render/src/components/atoms/FormField.tsx":"4"},{"size":500,"mtime":1610403258533,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1610403258534,"results":"7","hashOfConfig":"6"},{"size":1865,"mtime":1610652017847,"results":"8","hashOfConfig":"6"},{"size":7306,"mtime":1610651995066,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1c5hswl",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/Users/ralphmaamari/WebstormProjects/settings-render/src/index.tsx",[],["20","21"],"/Users/ralphmaamari/WebstormProjects/settings-render/src/reportWebVitals.ts",[],"/Users/ralphmaamari/WebstormProjects/settings-render/src/App.tsx",[],"/Users/ralphmaamari/WebstormProjects/settings-render/src/components/atoms/FormField.tsx",["22"],"import React, {HTMLAttributes, useCallback, useEffect, useRef, useState} from \"react\";\nimport styled from \"styled-components\";\nimport {FiCopy} from \"react-icons/all\";\n\ntype TField = 'Edit' | 'Copy';\n\ninterface IFormField extends HTMLAttributes<HTMLDivElement> {\n    type: TField,\n    formInputTextProps?: HTMLAttributes<HTMLInputElement>\n}\n\nenum CopyButtonText {\n    COPY = 'Copy',\n    COPIED = 'Copied!',\n}\n\nexport const FormField = (\n    {\n        type,\n        formInputTextProps,\n        ...props\n    }: IFormField\n) => {\n    const [isDisabled, setIsDisabled] = useState(true);\n    const [isEditVisible, setIsEditVisible] = useState(true);\n    const [copyButtonText, setCopyButtonText] = useState<CopyButtonText>(CopyButtonText.COPY);\n    const formInputFieldRef = useRef<HTMLInputElement>(null);\n    const [formValue, setFormValue] = useState('');\n    const previousFormValueRef = useRef(formValue);\n\n    const onEditButtonPress = () => {\n        previousFormValueRef.current = formValue;\n        setIsDisabled(false);\n        setIsEditVisible(false);\n    }\n\n    const onCopyButtonPress = async () => {\n        try {\n            window.focus();\n            await navigator.clipboard.writeText(formInputFieldRef.current?.placeholder ?? '');\n            setCopyButtonText(CopyButtonText.COPIED);\n        } catch (e) {\n            alert('Could not copy content' + e);\n        }\n    }\n\n    useEffect(() => {\n        if (copyButtonText === CopyButtonText.COPIED) {\n            setTimeout(() => {\n                setCopyButtonText(CopyButtonText.COPY);\n            }, 2000);\n        }\n    }, [copyButtonText])\n\n    useEffect(() => {\n        if (!isDisabled) {\n            formInputFieldRef.current?.focus();\n        }\n    }, [isDisabled])\n\n    const getActionButton = useCallback(() => {\n        switch (type) {\n            case \"Copy\":\n                return (\n                    <FormInputCopyButton\n                        type={'button'}\n                        onClick={onCopyButtonPress}\n                        isCopied={copyButtonText === CopyButtonText.COPIED}\n                    ><FiCopy /> {copyButtonText}</FormInputCopyButton>\n                )\n            case \"Edit\":\n                return (\n                    <FormInputEditButton\n                        type={'button'}\n                        onClick={onEditButtonPress}\n                        isEditVisible={isEditVisible}\n                    >Edit</FormInputEditButton>\n                )\n        }\n    }, [type, isEditVisible, copyButtonText]);\n\n    const onBlurTextInput = () => {\n        setIsDisabled(true);\n        setIsEditVisible(true);\n    }\n\n    const onEnterKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        switch (event.key) {\n            case 'Enter':\n                formInputFieldRef.current?.blur();\n                onBlurTextInput();\n                break;\n            case 'Escape':\n                formInputFieldRef.current?.blur();\n                onBlurTextInput();\n                break;\n        }\n    }\n\n    const onChangeText = (textValue: string) => {\n        setFormValue(textValue)\n    }\n\n    const onCancelPress = () => {\n        console.log(\"Butotn clicked\")\n        console.log(formValue, previousFormValueRef.current, \"iiii\")\n        setFormValue(previousFormValueRef.current);\n        onBlurTextInput();\n    }\n\n    const onSavePress = () => {\n        onBlurTextInput();\n    }\n\n    return (\n        <FormFieldContainer>\n            <FormInputContainer {...props}>\n                <FormInputText\n                    onKeyDown={(event) => onEnterKeyDown(event)}\n                    ref={formInputFieldRef}\n                    disabled={isDisabled}\n                    onChange={({target}) => onChangeText(target.value)}\n                    value={formValue}\n                    {...formInputTextProps}\n                />\n                <TextTrailingFade type={type} isVisible={isEditVisible} />\n                {getActionButton()}\n            </FormInputContainer>\n            <EditingButtonsContainer isVisible={!isEditVisible}>\n                <CancelButton onClick={onCancelPress}>Cancel</CancelButton>\n                <SaveButton onClick={onSavePress}>Save</SaveButton>\n            </EditingButtonsContainer>\n        </FormFieldContainer>\n    )\n}\n\nconst FormFieldContainer = styled.div`\n  height: 80px;\n  width: 200px;\n`;\n\ninterface IEditingButtonsContainer {\n    isVisible: boolean\n}\n\nconst EditingButtonsContainer = styled.div<IEditingButtonsContainer>`\n  width: 200px;\n  opacity: ${({isVisible}) => isVisible ? 1 : 0};\n  margin-top: -25px;\n  padding-top: ${({isVisible}) => isVisible ? '20px' : '0px'};\n  height: 40px;\n  position: absolute;\n  transition: opacity ease-out 0.15s, padding-top ease-out 0.15s;\n  border-radius: 5px;\n  overflow: hidden;\n  text-align: right;\n`;\n\n\ninterface ITextTrailingFade {\n    type: TField,\n    isVisible: boolean\n}\n\n// TODO: Change fade length based on Button Type\nconst TextTrailingFade = styled.div<ITextTrailingFade>`\n  background-image: linear-gradient(to right, transparent, white);\n  width: ${({type}) => type === 'Edit' ? '70px' : '130px'};\n  height: 30px;\n  pointer-events: none;\n  border-top-right-radius: 5px;\n  border-bottom-right-radius: 5px;\n  position: absolute;\n  margin-right: ${({type}) => type === 'Edit' ? '-130px' : '-70px'};\n  z-index: 98;\n  transition: opacity ease-out 0.15s;\n  opacity: ${({isVisible}) => isVisible ? 1 : 0};\n`;\n\nconst FormInputContainer = styled.div`\n  width: 200px;\n  border-radius: 5px;\n  height: 30px;\n  flex-direction: row;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 98;\n`;\n\nconst _BaseButton = styled.button`\n  outline: none;\n  box-shadow: none;\n  height: 25px;\n  border-style: solid;\n  border-radius: 5px;\n  z-index: 99;\n  cursor: pointer;\n  border-color: rgb(169,181,244);\n  border-width: 2px;\n`;\n\nconst SaveButton = styled(_BaseButton)`\n  width: 60px;\n  border: 0;\n  color: white;\n  background-color: rgb(89,110,245);\n  margin: 0 10px;\n`;\n\nconst CancelButton = styled(_BaseButton)`\n  width: 60px;\n  background-color: transparent;\n  color: rgb(94, 107, 150);\n  border-color: rgb(89,110,245);\n`;\n\ninterface IEditButton {\n    isEditVisible: boolean\n}\n\nconst FormInputEditButton = styled(_BaseButton)<IEditButton>`\n  background-color: white;\n  margin-right: -140px;\n  width: 40px;\n  transition: opacity ease-out 0.15s;\n  position: absolute;\n  opacity: ${({isEditVisible}) => isEditVisible ? 1 : 0};\n  display: ${({isEditVisible}) => isEditVisible ? 'block' : 'none'};\n`;\n\ninterface ICopyButton {\n    isCopied: boolean\n}\n\nconst FormInputCopyButton = styled(_BaseButton)<ICopyButton>`\n  margin-right: -100px;\n  width: 80px;\n  height: 25px;\n  position: absolute;\n  transition: background-color ease-in-out 0.2s;\n  background-color: ${({isCopied}) => isCopied ? 'rgb(82, 220, 191)' : 'white'};\n`;\n\nconst FormInputText = styled.input`\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: none;\n  outline: none;\n  padding: 5px;\n  width: 190px;\n  height: 20px;\n  color: grey;\n  border: 1px solid #dfe6f5;\n  &:focus {\n    color: black;\n    background-color: white;\n    border-width: 1px;\n    border-color: rgb(89,110,245);\n  }\n  transition: background-color ease-out 0.15s, color ease-out 0.15s, border-color ease-out 0.15s;\n  overflow: scroll;\n  z-index: 97;\n`;",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":80,"column":8,"nodeType":"29","endLine":80,"endColumn":45,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'onEditButtonPress'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [type, copyButtonText, onEditButtonPress, isEditVisible]",{"range":"36","text":"37"},[2479,2516],"[type, copyButtonText, onEditButtonPress, isEditVisible]"]